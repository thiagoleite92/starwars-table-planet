{"version":3,"sources":["context/StarWarsContext.js","components/LoadScreen.jsx","context/StarWarsProvider.js","components/TableHeader.jsx","components/TableContent.jsx","components/Table.jsx","components/FilterByText.jsx","components/NumericFilters.jsx","components/ClearFilters.jsx","components/SortFilter.jsx","App.jsx","index.js"],"names":["StarWarsContext","createContext","LoadScreen","className","StarWarsProvider","children","useState","data","setData","colHeaders","setColHeaders","loading","setLoading","filteredPlanets","setFilteredPlanets","search","setSearch","filterOptions","setFilterOptions","column","comparison","value","name","sort","numericFilters","setNumericFilters","useEffect","a","fetch","json","results","forEach","result","residents","keysName","Object","keys","colNames","fetchPlanets","filter","planet","toLowerCase","includes","toLocaleLowerCase","ASC","b","DESC","toConsume","handleChange","target","type","checked","oldState","handleNumericFilters","GreaterThan","parseInt","LessThan","EqualsThan","comparing","option","clearFilters","Provider","renderTableHeader","index","key","TableHeader","Consumer","map","TableContent","head","renderPlanets","Table","FilterByText","htmlFor","data-testid","onChange","e","renderInputText","NumericFilters","min","onClick","filtersColumns","ClearFilters","SortFilter","renderSort","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2b03680.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","import React from 'react';\nimport './LoadScreen.css';\n\nconst LoadScreen = () => (\n  <div className=\"loading\">\n    <h2>Loading...</h2>\n  </div>\n);\n\nexport default LoadScreen;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport LoadScreen from '../components/LoadScreen';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setData] = useState([]);\n  const [colHeaders, setColHeaders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filteredPlanets, setFilteredPlanets] = useState([]);\n  const [search, setSearch] = useState('');\n  const [filterOptions, setFilterOptions] = useState([\n    'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  const [numericFilters, setNumericFilters] = useState({\n    column: 'population',\n    comparison: 'maior que',\n    value: 0,\n    name: 'Name',\n    sort: 'ASC',\n  });\n\n  useEffect(() => {\n    const endpoint = 'https://swapi-trybe.herokuapp.com/api/planets/';\n    const fetchPlanets = async () => {\n      const { results } = await (await fetch(endpoint)).json();\n      results.forEach((result) => (\n        delete result.residents\n      ));\n      setData(results);\n      setLoading(false);\n      const colNames = () => {\n        const keysName = Object.keys(results[0]);\n        setColHeaders(keysName);\n      };\n      colNames();\n    };\n    fetchPlanets();\n  }, [loading]);\n\n  useEffect(() => {\n    setFilteredPlanets(\n      data.filter(\n        (planet) => (\n          planet.name.toLowerCase().includes(search.toLocaleLowerCase())\n        ),\n      ),\n    );\n  }, [search, data]);\n\n  useEffect(() => {\n    const { name, sort } = numericFilters;\n    const sortMethod = {\n      ASC: () => setFilteredPlanets(data.sort((a, b) => a[name] - b[name])),\n      DESC: () => setFilteredPlanets(data.sort((a, b) => a[name] + b[name])),\n    };\n    sortMethod[sort]();\n  }, [numericFilters, data]);\n\n  function handleChange({ target }) {\n    const { name } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    setNumericFilters((oldState) => ({\n      ...oldState,\n      [name]: value,\n    }));\n  }\n\n  function handleNumericFilters() {\n    const { column, comparison, value } = numericFilters;\n\n    const GreaterThan = (planet) => planet[column] > parseInt(value, 10);\n    const LessThan = (planet) => planet[column] < parseInt(value, 10);\n    const EqualsThan = (planet) => planet[column] === value;\n\n    const comparing = {\n      'maior que': () => setFilteredPlanets(data.filter(GreaterThan)),\n      'menor que': () => setFilteredPlanets(data.filter(LessThan)),\n      'igual a': () => setFilteredPlanets(data.filter(EqualsThan)),\n    };\n\n    setFilterOptions(\n      filterOptions.filter((option) => option !== column),\n    );\n\n    return comparing[comparison]();\n  }\n\n  function clearFilters() {\n    setFilteredPlanets(data);\n  }\n\n  if (loading) {\n    return <LoadScreen />;\n  }\n\n  const toConsume = {\n    filteredPlanets,\n    colHeaders,\n    setSearch,\n    filterOptions,\n    handleChange,\n    handleNumericFilters,\n    clearFilters,\n  };\n\n  return (\n\n    <StarWarsContext.Provider value={ toConsume }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default StarWarsProvider;\n","import React from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction renderTableHeader(colHeaders, index) {\n  return (\n    <th key={ index }>{colHeaders}</th>\n  );\n}\n\nconst TableHeader = () => (\n  <StarWarsContext.Consumer>\n    {({ colHeaders }) => colHeaders.map(renderTableHeader) }\n  </StarWarsContext.Consumer>\n);\n\nexport default TableHeader;\n","import React from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction renderPlanets(filteredPlanets, colHeaders) {\n  return filteredPlanets.map((planet, key) => (\n    <tr key={ key }>\n      {\n        colHeaders.map((head) => (\n          <td key={ head }>{planet[head]}</td>\n        ))\n      }\n    </tr>\n  ));\n}\n\nconst TableContent = () => (\n\n  <StarWarsContext.Consumer>\n    {\n      ({ filteredPlanets, colHeaders }) => renderPlanets(filteredPlanets, colHeaders)\n    }\n  </StarWarsContext.Consumer>\n);\n\nexport default TableContent;\n","import React from 'react';\nimport TableHeader from './TableHeader';\nimport TableContent from './TableContent';\n\nfunction Table() {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <TableHeader />\n        </tr>\n      </thead>\n      <tbody>\n        <TableContent />\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","// video referencia pra fazer o filtro https://www.youtube.com/watch?v=Q8JyF3wpsHc por nome\nimport React from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction renderInputText(setSearch) {\n  return (\n    <label htmlFor=\"planet\">\n      Filter planets by name\n      <input\n        data-testid=\"name-filter\"\n        name=\"planet\"\n        type=\"text\"\n        onChange={ (e) => setSearch(e.target.value) }\n      />\n    </label>\n  );\n}\n\nconst FilterByText = () => (\n  <StarWarsContext.Consumer>\n    {\n      (({ setSearch }) => renderInputText(setSearch))\n    }\n  </StarWarsContext.Consumer>\n);\n\nexport default FilterByText;\n","import React from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction filtersColumns(handleChange, handleNumericFilters, filterOptions) {\n  const filterComparison = [\n    'maior que', 'menor que', 'igual a'];\n\n  return (\n    <>\n      Filter by numeric Values\n      <label htmlFor=\"column-filter\">\n        <select data-testid=\"column-filter\" name=\"column\" onChange={ handleChange }>\n          {\n            filterOptions.map((option, key) => <option key={ key }>{option}</option>)\n          }\n        </select>\n      </label>\n      <label htmlFor=\"comparison-filter\">\n        <select\n          data-testid=\"comparison-filter\"\n          name=\"comparison\"\n          onChange={ handleChange }\n        >\n          {\n            filterComparison.map((comparing, key) => (\n              <option key={ key }>{comparing}</option>))\n          }\n        </select>\n      </label>\n      <label htmlFor=\"value-filter\">\n        <input\n          type=\"number\"\n          data-testid=\"value-filter\"\n          name=\"value\"\n          min=\"0\"\n          onChange={ handleChange }\n        />\n      </label>\n      <button\n        type=\"submit\"\n        data-testid=\"button-filter\"\n        onClick={ () => handleNumericFilters() }\n      >\n        Aplicar filtro\n      </button>\n    </>\n  );\n}\n\nconst NumericFilters = () => (\n  <StarWarsContext.Consumer>\n    {\n      (({ handleChange, handleNumericFilters, filterOptions }) => (\n        filtersColumns(handleChange, handleNumericFilters, filterOptions)))\n    }\n  </StarWarsContext.Consumer>\n);\n\nexport default NumericFilters;\n","import React from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nconst ClearFilters = () => (\n  <StarWarsContext.Consumer>\n    {\n      (({ clearFilters }) => (\n        <div data-testid=\"filter\">\n          <button\n            type=\"button\"\n            onClick={ () => clearFilters() }\n          >\n            X\n          </button>\n        </div>\n      ))\n    }\n  </StarWarsContext.Consumer>\n);\n\nexport default ClearFilters;\n","import React from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction renderSort(colHeaders, handleChange) {\n  return (\n    <>\n      <select\n        data-testid=\"column-sort\"\n        name=\"name\"\n      >\n        {\n          colHeaders.map((option, key) => (\n            <option key={ key } onChange={ handleChange }>{option}</option>))\n        }\n      </select>\n      <input\n        type=\"radio\"\n        data-testid=\"column-sort-input-asc\"\n        value=\"ASC\"\n        name=\"sort\"\n        checked\n        onChange={ handleChange }\n      />\n      ASCENDENTE\n      <input\n        type=\"radio\"\n        data-testid=\"column-sort-input-asc\"\n        value=\"DESC\"\n        name=\"sort\"\n        onChange={ handleChange }\n      />\n      DESCENDENTE\n      <button\n        type=\"button\"\n        data-testid=\"column-sort-button\"\n      >\n        Ordenar\n      </button>\n    </>\n  );\n}\n\nfunction SortFilter() {\n  return (\n    <StarWarsContext.Consumer>\n      { ({ colHeaders, handleChange }) => renderSort(colHeaders, handleChange)}\n    </StarWarsContext.Consumer>\n  );\n}\n\nexport default SortFilter;\n","// https://www.youtube.com/watch?v=nV7Mf77GiOc video de referência para renderizar a tabela.\n\nimport React from 'react';\nimport StarWarsProvider from './context/StarWarsProvider';\nimport './App.css';\nimport Table from './components/Table';\nimport FilterByText from './components/FilterByText';\nimport NumericFilter from './components/NumericFilters';\nimport ClearFilters from './components/ClearFilters';\nimport SortFilter from './components/SortFilter';\n\nfunction App() {\n  return (\n    <StarWarsProvider>\n      <FilterByText />\n      <NumericFilter />\n      <ClearFilters />\n      <SortFilter />\n      <Table />\n    </StarWarsProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}